filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
productid
i = 1
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
productid
foreach(i = seq(length(hd_files))) %dopar% {
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
r = readRDS(hd_files[[i]])
# Scale vegetation indicies
if(grepl("vegidcs", filename)){
r = scale(r, center = TRUE, scale = TRUE)
}
# ra = aggregate(r, fact=2, fun=mean)
for(w in windows){
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
raor = setValues(r[[1]], raomatrix[[1]])
names(raor) = productid
saveRDS(raor, file = paste0(path_hyp_raoq,
productid, "_", w, ".rds"))
}
}
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
path_hyp_specidcs = paste0(path_data, "/050_hypspec_specidcs/")
dir.create(paste0(path_hyp_specidcs), showWarnings = FALSE)
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
i = !
i = 1
filename = basename(hd_files[i])
filename
productid = paste0(substr(filename, 1, nchar(filename)-4), "_mdc")
productid
r = readRDS(hd_files[[i]])
r
kmeans(r)
?kmeans
t = as .data.frame(r)
t = as.data.frame(r)
t
t = getValues(r)
dim(t)
kmenas(t)
kmeans(t)
kmeans(t, centers = 1)
kmeans(t, centers = 2)
kmeans(t, centers = 1)
kmeans(na.omit(t), centers = 1)
na.omit(t)
dim(na.omit(t))
dim(t)
plot(t)
plot(r)
plot(r[[108]])
plot(r[[100]])
km = kmeans(na.omit(r), center = 1)
km = kmeans(na.omit(getValues(r)), center = 1)
km
rds = na.omit(getValues(r))
km = kmeans(rds, center = 1)
sqrt(rowSums(rds - fitted(km))**2)
kmd = sqrt(rowSums(rds - fitted(km))**2)
plot(kmd)
mean(kmd)
sd(kmd)
var(kmd)
mean(kmd)
sd(kmd)
head(rds)
rds[1, ]
fitted(km)
str(km)
rds - fitted(km)
rds-km
rds-fitted(km)
rds[1, ]
kmd
r
rds = getValues(r)
which(is.na(rds))
is.na(rds)
head(rds)
rds_na = which(is.na(rds))
rds_na
rds = getValues(r)
complete.cases(rds)
which(complete.cases(rds))
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
dim(rds_cc)
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
?setValues
rds_km = rds
str(kmd)
rds_kmd = rds[, 1]
rds_kmd
rds_kmd[cc] = kmd
rds_kmd = setValues(r[[1]], rds_kmd)
plot(rds_kmd)
mean(getValues(rds_kmd))
mean(getValues(rds_kmd), na.rm = TRUE)
sd(getValues(rds_kmd), na.rm = TRUE)
rds = na.omit(getValues(r))
km = kmeans(rds, center = 1)
kmd = sqrt(rowSums(rds - fitted(km))**2)
mean(kmd)
sd(kmd)
rds_kmd
names(rds_kmd) = productid
rds_kmd
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
names(rds_kmd) = productid
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
hd_files
i = 7
n
filename = basename(hd_files[i])
filename
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
rds = getValues(r)
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
summary(rds_cc)
dim(rds_cc)
all_na = grep(ncell(r), summary(r)[6,])
r
r = readRDS(hd_files[[i]])
all_na = grep(ncell(r), summary(r)[6,])
ncell(r)
summary(r)[6,]
r
all_na = grep(ncell(r), summary(getValues(r))[6,])
all_na
i = 6
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
rds = getValues(r)
all_na = grep(ncell(r), summary(getValues(r))[6,])
all_na
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
f = hd_files[i]
plotid = substr(basename(f), 1, 4)
r = readRDS(f)
nl = nlayers(r)
all_na = grep(ncell(r), summary(r)[6,])
all_na
plotid
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
filename = basename(hd_files[i])
filename
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
productid
r
r = readRDS(hd_files[[i]])
r
summary(r[[149]])
summary(r[[148]])
all_na = grep(ncell(r), summary(getValues(r))[6,])
all_na
ncell(r)
summary(getValues(r))[6,]
summary(r[[148]])
all_na
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
i
f = hd_files[i]
f
plotid = substr(basename(f), 1, 4)
r = readRDS(f)
nl = nlayers(r)
all_na = grep(ncell(r), summary(r)[6,])
if(length(all_na) > 0){
r = r[[-all_na]]
} else {
all_na = -1
}
all_na
pca = rasterPCA(r)
v = pca$model$sdev**2
# Continuous Significant Dimensionality
csd = round(sum(sapply(v, function(x){min(x,1)})), 0)
use = seq(csd)
log = list(file = basename(f), all_na = all_na, csd = csd)
pcai = t(t(as.matrix(pca$map)[, use] %*% t(pca$model$loadings)[use, ]) + pca$model$center)
tmp = r[[1]]
pcair = stack(lapply(seq(ncol(pcai)), function(i){
setValues(tmp, pcai[, i])
}))
pcair
if(all_na == 1){
pcair = stack(setValues(tmp, rep(NA, ncell(tmp))), pcair)
} else if(all_na > 1){
pcair = stack(pcair[[1:(all_na-1)]],
setValues(tmp, rep(NA, ncell(tmp))),
pcair[[(all_na):nlayers(pcair)]])
}
pcair
names(pcair) = paste0(plotid, "_pcai_", seq(nl))
all_na
pcair[[149]]
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
i = 6
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
r[[149]]
rds = getValues(r)
all_na = grep(ncell(r), summary(getValues(r))[6,])
all_na
ncell(r)
summary(getValues(r))[6,]
all_na = grep(ncell(r), summary(getValues(r))[7,])
all_na
summary(r)
summary(brick(r))
summary(getValues(r))
nrow(rds)
all_na = grep(nrow(rds), summary(rds)[7,])
all_na
if(length(all_na) > 0){
r = r[[-all_na]]
} else {
all_na = -1
}
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
str(rds)
rds = rds[[,-all_na]]
all_na
rds[, 1]
rds[, -149]
all_na
r = readRDS(hd_files[[i]])
rds = getValues(r)
all_na = grep(nrow(rds), summary(rds)[7,])
if(length(all_na) > 0){
rds = rds[,-all_na]
} else {
all_na = -1
}
dim(rds)
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
rds_kmd = rds[, 1]
rds_kmd[cc] = kmd
rds_kmd = setValues(r[[1]], rds_kmd)
mean(rds_kmd)
mean(getValues(rds_kmd))
mean(getValues(rds_kmd), na.rm = TRUE)
sd(getValues(rds_kmd), na.rm = TRUE)
plot(rds)
plot(rds_kmd)
names(rds_kmd) = productid
i = 100
productid
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
productid
# Compute mean distance from centroid on original band stack and
# scaled vegetation inidces stack
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 2
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
dir.create(paste0(path_hyp_specidcs), showWarnings = FALSE)
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
foreach (i = seq(length(hd_files))) %dopar% {
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
rds = getValues(r)
all_na = grep(nrow(rds), summary(rds)[7,])
if(length(all_na) > 0){
rds = rds[,-all_na]
} else {
all_na = -1
}
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
rds_kmd = rds[, 1]
rds_kmd[cc] = kmd
rds_kmd = setValues(r[[1]], rds_kmd)
names(rds_kmd) = productid
saveRDS(rds_kmd, file=paste0(path_hyp_specidcs, productid, ".rds"))
}
stopCluster(cl)
# Set path ---------------------------------------------------------------------
if(Sys.info()["sysname"] == "Windows"){
filepath_base = "C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/"
} else {
filepath_base = "/media/permanent/active/KI-Hyperspec/"
}
filepath_source = paste0(filepath_base, "HySpec_KiLi/src/001_functions.R")
path_data = paste0(filepath_base, "/data/")
path_biodiv = paste0(path_data, "/biodiv/")
path_hyp_org = paste0(path_data, "/020_hypspec_org/")
path_hyp_aio = paste0(path_data, "/025_hypspec_aio/")
path_hyp_nrm = paste0(path_data, "/030_hypspec_nrm/")
path_hyp_vegidcs = paste0(path_data, "/040_hypspec_vegidcs/")
path_hyp_kmdc = paste0(path_data, "/050_hypspec_kmdc/")
path_hyp_raoq = paste0(path_data, "/060_hypspec_raoq/")
path_plots = paste0(path_data, "/plots/")
path_rdata = paste0(path_data, "/rdata/")
path_meta = paste0(path_data, "/meta/")
path_temp = paste0(path_data, "/temp/")
path_output = paste0(path_data, "/output/")
path_vis = paste0(path_data, "/vis/")
# Set libraries ----------------------------------------------------------------
library(biodivTools) # devtools::install_github("environmentalinformatics-marburg/biodivTools")
library(CAST)
library(doParallel)
library(grid)
library(gridExtra)
# library(gpm)
library(hsdar)
# library(lavaan)
# library(rPointDB)
library(rgeos)
library(ggplot2)
library(mapview)
# library(metTools)  # devtools::install_github("environmentalinformatics-marburg/metTools")
library(raster)
library(RStoolbox)
library(reshape2)
library(rgdal)
# library(satellite)
library(satelliteTools)  # devtools::install_github("environmentalinformatics-marburg/satelliteTools")
# library(semPlot)
library(sp)
library(spacetime)
# library(vegan)
# library(yaml)
# Other settings ---------------------------------------------------------------
source(filepath_source)
rasterOptions(tmpdir = path_temp)
saga_cmd = "C:/OSGeo4W64/apps/saga-ltr/saga_cmd.exe"
# initOTB("C:/OSGeo4W64/bin/")
initOTB("C:/OSGeo4W64/OTB-6.2.0-Win64/bin/")
# Compute mean distance from centroid on original band stack and
# scaled vegetation inidces stack
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 2
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
dir.create(paste0(path_hyp_kmdc), showWarnings = FALSE)
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
foreach (i = seq(length(hd_files)), .packages = c("raster")) %dopar% {
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
rds = getValues(r)
all_na = grep(nrow(rds), summary(rds)[7,])
if(length(all_na) > 0){
rds = rds[,-all_na]
} else {
all_na = -1
}
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
rds_kmd = rds[, 1]
rds_kmd[cc] = kmd
rds_kmd = setValues(r[[1]], rds_kmd)
names(rds_kmd) = productid
saveRDS(rds_kmd, file=paste0(path_hyp_kmdc, productid, ".rds"))
}
stopCluster(cl)
hd_files
# Compute mean distance from centroid on original band stack and
# scaled vegetation inidces stack
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
dir.create(paste0(path_hyp_kmdc), showWarnings = FALSE)
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
foreach (i = seq(length(hd_files)), .packages = c("raster")) %dor% {
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
rds = getValues(r)
all_na = grep(nrow(rds), summary(rds)[7,])
if(length(all_na) > 0){
rds = rds[,-all_na]
} else {
all_na = -1
}
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
rds_kmd = rds[, 1]
rds_kmd[cc] = kmd
rds_kmd = setValues(r[[1]], rds_kmd)
names(rds_kmd) = productid
saveRDS(rds_kmd, file=paste0(path_hyp_kmdc, productid, ".rds"))
}
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
# Compute mean distance from centroid on original band stack and
# scaled vegetation inidces stack
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
dir.create(paste0(path_hyp_kmdc), showWarnings = FALSE)
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
foreach (i = seq(length(hd_files)), .packages = c("raster")) %do% {
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
rds = getValues(r)
all_na = grep(nrow(rds), summary(rds)[7,])
if(length(all_na) > 0){
rds = rds[,-all_na]
} else {
all_na = -1
}
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
rds_kmd = rds[, 1]
rds_kmd[cc] = kmd
rds_kmd = setValues(r[[1]], rds_kmd)
names(rds_kmd) = productid
saveRDS(rds_kmd, file=paste0(path_hyp_kmdc, productid, ".rds"))
}
stopCluster(cl)
stopCluster(cl)
# Compute mean distance from centroid on original band stack and
# scaled vegetation inidces stack
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 1
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
dir.create(paste0(path_hyp_kmdc), showWarnings = FALSE)
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
foreach (i = seq(length(hd_files)), .packages = c("raster")) %do% {
print(filename)
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
rds = getValues(r)
all_na = grep(nrow(rds), summary(rds)[7,])
if(length(all_na) > 0){
rds = rds[,-all_na]
} else {
all_na = -1
}
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
rds_kmd = rds[, 1]
rds_kmd[cc] = kmd
rds_kmd = setValues(r[[1]], rds_kmd)
names(rds_kmd) = productid
saveRDS(rds_kmd, file=paste0(path_hyp_kmdc, productid, ".rds"))
}
