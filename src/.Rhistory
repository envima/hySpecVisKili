for(i in seq(nrow(t))){
raoqe[t[i,"row"], t[i,"col"]] = t[i,"value"]
}
if(exists("pb")) {
close(pb)
}
} else{
message("Something went wrong when trying to calculate Rao's indiex.")
}  # end of multimensional RaoQ
message("\nCalculation of Multidimensional Rao's index complete.\n")
#----------------------------------------------------#
#
## Shannon
#
if( shannon==T ) {
message("\nStarting Shannon-Wiener index calculation:\n")
# Reshape values
values<-as.numeric(as.factor(rasterm))
rasterm_1<-matrix(data=values,nrow=dim(rasterm)[1],ncol=dim(rasterm)[2])
#
## Add "fake" columns and rows for moving window
#
hor<-matrix(NA,ncol=dim(rasterm)[2],nrow=w)
ver<-matrix(NA,ncol=w,nrow=dim(rasterm)[1]+w*2)
trasterm<-cbind(ver,rbind(hor,rasterm_1,hor),ver)
#
## Loop over all the pixels
#
for (cl in (1+w):(dim(rasterm)[2]+w)) {
for(rw in (1+w):(dim(rasterm)[1]+w)) {
if( length(!which(!trasterm[c(rw-w):c(rw+w),c(cl-w):c(cl+w)]%in%NA)) < window^2-((window^2)*na.tolerance) ) {
shannond[rw-w,cl-w]<-NA
} else {
tw<-summary(as.factor(trasterm[c(rw-w):c(rw+w),c(cl-w):c(cl+w)]))
if( "NA's"%in%names(tw) ) {
tw<-tw[-length(tw)]
}
tw[tw>1]<-1
tw_values<-as.vector(tw)
p<-tw_values/length(tw_values)
p_log<-log(p)
shannond[rw-w,cl-w]<-(-(sum(p*p_log)))
}
}
svMisc::progress(value=cl, max.value=(c((dim(rasterm)[2]+w)+(dim(rasterm)[1]+w))/2), progress.bar = FALSE)
}
message(("\nCalculation of Shannon's index is also complete!\n"))
} # End ShannonD
#----------------------------------------------------#
#
## Return multiple outputs
#
if(debugging){
message( "#check: return function." )
}
if( shannon ) {
if( nc.cores>1 ) {
outl<-list(do.call(cbind,raop),shannond)
names(outl)<-c("Rao","Shannon")
return(outl)
} else if( nc.cores==1 ){
outl<-list(raoqe,shannond)
names(outl)<-c("Rao","Shannon")
return(outl)
}
} else if( !shannon & mode=="classic" ) {
if( isfloat & nc.cores>1 ) {
#return(raop)
return(do.call(cbind,raop)/mfactor)
if(debugging){
message("#check: return function - classic.")
}
} else if( !isfloat & nc.cores>1 ) {
outl<-list(do.call(cbind,raop))
names(outl)<-c("Rao")
return(outl)
} else if( sfloat & nc.cores==1 ) {
outl<-list(raoqe/mfactor)
names(outl)<-c("Rao")
return(outl)
} else if( !isfloat & nc.cores==1 ) {
outl<-list(raoqe)
names(outl)<-c("Rao")
return(outl)
} else if( !isfloat & nc.cores>1 ) {
outl<-list(do.call(cbind,raoqe))
names(outl)<-c("Rao")
return(outl)
}
} else if( !shannon & mode=="multidimension" ) {
outl<-list(raoqe)
names(outl)<-c("Multidimension_Rao")
return(outl)
}
}
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
raor = setValues(r[[1]], raomatrix[[1]])
names(raor) = plotid
raor
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
pb = shapefile(paste0(path_plots, "BPolygon.shp"))
dir.create(paste0(path_hyp_nrm), showWarnings = FALSE)
f = hd_files[[1]]
r = readRDS(f)
r
plot(r)
m = mnf(as(r, "SpatialGridDataFrame"), use = "complete.obs")
m$values
length(m$values)
mi = as.matrix(m$x@data) %*% solve(m$rotation)
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
mir
plot(mir, 108)
plot(r, 108)
plot(r[[108]]/mir[[108]])
(r[[108]]/mir[[108]])
f = hd_files[[7]]
r = readRDS(f)
m = mnf(as(r, "SpatialGridDataFrame"), use = "complete.obs")
m$values
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data) %*% solve(m$rotation)
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[108]]/mir[[108]]
f = hd_files[[1]]
r = readRDS(f)
m = mnf(as(r, "SpatialGridDataFrame"), use = "complete.obs")
m$values
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(9, length(m$values))
mi = as.matrix(m$x@data) %*% solve(m$rotation)
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[108]]/mir[[108]]
plot(mir[[108]])
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation[, use])
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation[use, ])
str(m$x@data)
dim(m$x@data)
dim(m$rotation)
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[108]]/mir[[108]]
plot(mir[[108]])
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[108]]/mir[[108]]
plot(mir[[108]])
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[, use]
dim(solve(m$rotation))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[, use]
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[, use]
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
r = readRDS(f)
m = mnf(as(r, "SpatialGridDataFrame"), use = "complete.obs")
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[108]]/mir[[108]]
plot(mir[[108]])
plot(r[[108]]/mir[[108]])
plot(r[[108]])
plot(r[[60]])
plot(r[[30]])
plot(r[[70]])
plot(r[[100]])
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[108]]/mir[[108]]
plot(r[[100]])
plot(mir[[100]])
plot(r[[100]])
plot(mir[[100]])
r = readRDS(f)
m = mnf(as(r, "SpatialGridDataFrame"), use = "complete.obs")
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
plot(r[[100]])
plot(mir[[100]])
plot(r[[108]])
plot(mir[[108]])
plot(r[[100]])
plot(mir[[100]])
r[[100]]/mir[[100]]
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data)[, use] %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[100]]/mir[[100]]
plot(r[[100]])
plot(mir[[100]])
r = readRDS(f)
m = mnf(as(r, "SpatialGridDataFrame"), use = "complete.obs")
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[100]]/mir[[100]]
r[[108]]/mir[[108]]
plot(r[[100]])
plot(r[[108]])
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_dividcs), showWarnings = FALSE)
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_dividcs), showWarnings = FALSE)
i = 1
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
r
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
filepath_source
filepath_source = paste0(filepath_base, "HySpec_KiLi/src/001_functions.R")
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
source(filepath_source)
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
raomatrix
stopCluster(cl)
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_dividcs), showWarnings = FALSE)
i = 1
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
head(raomatrix)
raor = setValues(r[[1]], raomatrix[[1]])
raor
plotid
names(raor) = paste0(plotid, "raoq")
raor
plot(raor)
saveRDS(raor, file = paste0(path_hyp_dividcs,
substr(basename(hd_files[[i]]), 1, 4),
"_raoq_", window, ".rds"))
# Compute Rao's Q on original band values
window = 3
paste0(path_hyp_dividcs,
substr(basename(hd_files[[i]]), 1, 4),
"_raoq_", window, ".rds")
saveRDS(raor, file = paste0(path_hyp_dividcs,
substr(basename(hd_files[[i]]), 1, 4),
"_raoq_", window, ".rds"))
# Compute Rao's Q on original band values
windows = c(3, 10)
# Compute Rao's Q on original band values
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
# Compute Rao's Q on original band values
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
# Compute Rao's Q on vegetation indices
hd_files = list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE)
# Compute Rao's Q on individual vegetation indices
hd_files = list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
i = 1
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
w = 3
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
r
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
hd_files
plotid = substr(basename(hd_files[[i]]), 1, 4)
plotid
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
# Compute Rao's Q on original band values
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
# Compute Rao's Q on individual vegetation indices
hd_files = list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE)
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
plot(r)
# Compute Rao's Q on original band and vegetation indices values
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
# Compute Rao's Q on original band and vegetation indices values
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
hd_files
i = 1
basename(hd_files[[i]])
filename = basename(hd_files[[i]])
substr(filename, 1, nchar(filename)-4)
productid = substr(filename, 1, nchar(filename)-4)
productid
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
paste0(path_hyp_dividcs,
productid, "_", w, ".rds"))
paste0(path_hyp_dividcs,
productid, "_", w, ".rds")
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
paste0(path_hyp_dividcs,
productid, "_", w, ".rds")
path_hyp_dividcs
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
path_hyp_dividcs
paste0(path_hyp_raoq,
productid, "_", w, ".rds")
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_vegidcs), showWarnings = FALSE)
vis =  c("CARI",
"Carter", "Carter2", "Carter3", "Carter4", "Carter5", "Carter6",
"CI", "CI2", "ClAInt",
"CRI1", "CRI2", "CRI3", "CRI4",
"Datt", "Datt2", "Datt4", "Datt5", "Datt6",
"DD", "DDn", "DWSI4",
"EVI", "GDVI_2", "GDVI_3", "GDVI_4", "GI", "Gitelson", "Gitelson2",
"GMI1", "GMI2", "GreenNDVI", "Maccioni",
"MCARI", "MCARI/OSAVI", "MCARI2", "MCARI2/OSAVI2",
"mND705", "mNDVI", "MPRI", "MSAVI", "mSR", "mSR2", "mSR705",
"MTCI", "MTVI", "NDVI", "NDVI2", "NDVI3", "NPCI",
"OSAVI", "OSAVI2", "PARS", "PRI", "PRI*CI2", "PRI_norm", "PSND",
"PSRI", "PSSR", "PWI", "RDVI", "REP_Li", "SAVI", "SIPI", "SPVI",
"SR", "SR1", "SR2", "SR3", "SR4", "SR5", "SR6", "SR7", "SR8",
"SRPI", "TCARI", "TCARI/OSAVI", "TCARI2", "TCARI2/OSAVI2",
"TGI", "TVI", "Vogelmann", "Vogelmann2", "Vogelmann4")
i = 1
plotid = substr(basename(hd_files[[i]]), 1, 4)
m = h_meta[[2]][[h_meta[[1]]$list[grep(plotid, h_meta[[1]]$plotID)]]]
r = hsdar::speclib(brick(readRDS(hd_files[[i]])),
wavelength = m$wavelength,
fwhm = m$fwhm,
continuousdata = "auto")
v = vegindex(r, index = vis)
vr = v@spectra@spectra_ra
names(vr) = vis
vr
?raster
inMemory(vr)
?readAll
vr = readAll(v@spectra@spectra_ra)
names(vr) = vis
vr
saveRDS(vr, file = paste0(path_hyp_vegidcs, plotid, "_vegidcs.rds"))
test = readRDS(file = paste0(path_hyp_vegidcs, plotid, "_vegidcs.rds"))
test
plot(test)
