stack(unlist(txtr_gw, recursive = TRUE))
names(stack(unlist(txtr_gw, recursive = TRUE)))
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
stack(unlist(txtr_gw, recursive = TRUE))
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
stopCluster
stopCluster()
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
# if(length(showConnections()) == 0){
#   cores = 2
#   cl = parallel::makeCluster(cores)
#   doParallel::registerDoParallel(cl)
# }
dir.create(paste0(path_hyp_txtr), showWarnings = FALSE)
hd_files = c(list.files(path_hyp_kmdc, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
windows = c(3, 11, 21, 31)
n_grey = c(32, 128)
i = 1
filename = basename(hd_files[i])
productid = substr(filename, 1, nchar(filename)-4)
r = readRDS(hd_files[[i]])
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
# if(length(showConnections()) == 0){
#   cores = 2
#   cl = parallel::makeCluster(cores)
#   doParallel::registerDoParallel(cl)
# }
dir.create(paste0(path_hyp_txtr), showWarnings = FALSE)
hd_files = c(list.files(path_hyp_kmdc, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
windows = c(3, 11, 21, 31)
n_grey = c(32, 128)
i = 1
filename = basename(hd_files[i])
productid = substr(filename, 1, nchar(filename)-4)
r = readRDS(hd_files[[i]])
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
txtr_wg
stack(unlist(txtr_gw, recursive = TRUE))
txtr_gw
txtr_g
txtr_wg
stack(unlist(txtr_wg, recursive = TRUE))
plot(txtr_wg)
txtr_wg = stack(unlist(txtr_wg, recursive = TRUE))
plot(txtr_wg)
windows = c(3, 11, 21, 31, 41)
n_grey = c(32)
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
txtr_wg = stack(unlist(txtr_wg, recursive = TRUE))
plot(txtr_wg)
hd_files
plot(r)
plot(txtr_wg[[1]])
plot(txtr_wg[[4]])
plot(txtr_wg[[5]])
mean(getValues(r), na.rm = TRUE)
sd(getValues(r), na.rm = TRUE)/mean(getValues(r), na.rm = TRUE)
sd(getValues(txtr_wg[[1]]), na.rm = TRUE)/mean(getValues(txtr_wg[[1]]), na.rm = TRUE)
sd(getValues(txtr_wg[[2]]), na.rm = TRUE)/mean(getValues(txtr_wg[[2]]), na.rm = TRUE)
sd(getValues(txtr_wg[[3]]), na.rm = TRUE)/mean(getValues(txtr_wg[[3]]), na.rm = TRUE)
t = as.data.frame(txtr_wg)
dim(t)
as.matrix(t)
cor(s.matrix(t))
cor(as.matrix(t))
c = cor(as.matrix(t))
dim(c)
library(corrplot)
corrplot(c)
c = cor(as.matrix(t), na.rm = TRUE)
c = cor(as.matrix(t), ommit.na = TRUE)
?cor
c = cor(as.matrix(t), na.rm = TRUE)
m = as.matrix(t)
c = cor(m, na.rm = TRUE)
m = as.matrix(complete.cases(t))
c = cor(m, na.rm = TRUE)
c = cor(m)
corrplot(c)
t
t[complete.cases(t)]
t[complete.cases(t),]
corrplot(cor(as.matric(t[complete.cases(t),])))
corrplot(cor(as.matrix(t[complete.cases(t),])))
windows = c(3, 11, 21, 31)
n_grey = c(32, 64)
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
txtr_wg = stack(unlist(txtr_wg, recursive = TRUE))
corrplot(cor(as.matric(t[complete.cases(t),])))
corrplot(cor(as.matrix(t[complete.cases(t),])))
windows = c(3, 11, 21, 31)
n_grey = c(32, 64)
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
txtr_wg = stack(unlist(txtr_wg, recursive = TRUE))
txtr_wg
stack(unlist(txtr_wg, recursive = TRUE))
4*2*3
txtr_wg = stack(unlist(txtr_wg, recursive = TRUE))
corrplot(cor(as.matrix(txtr_wg)))
corrplot(cor(as.matrix(as.data.frame(txtr_wg))))
corrplot(cor(as.matrix(t[complete.cases(t),])))
t = as.data.frame(txtr_wg)
corrplot(cor(as.matrix(t[complete.cases(t),])))
11/2
31/2
3/2
txtr_wg
path_hyp_txtr
productid
names(txtr_wg)
# Set path ---------------------------------------------------------------------
if(Sys.info()["sysname"] == "Windows"){
filepath_base = "C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/"
} else {
filepath_base = "/media/permanent/active/KI-Hyperspec/"
}
filepath_source = paste0(filepath_base, "HySpec_KiLi/src/001_functions.R")
path_data = paste0(filepath_base, "/data/")
path_biodiv = paste0(path_data, "/biodiv/")
path_hyp_org = paste0(path_data, "/020_hypspec_org/")
path_hyp_aio = paste0(path_data, "/025_hypspec_aio/")
path_hyp_nrm = paste0(path_data, "/030_hypspec_nrm/")
path_hyp_vegidcs = paste0(path_data, "/040_hypspec_vegidcs/")
path_hyp_kmdc = paste0(path_data, "/050_hypspec_kmdc/")
path_hyp_raoq = paste0(path_data, "/060_hypspec_raoq/")
path_hyp_glcm = paste0(path_data, "/070_hypspec_glcm/")
path_hyp_pred = paste0(path_data, "/090_hypspec_pred/")
path_comb_gpm_sr = paste0(path_data, "/100_comb_gpm_sr/")
path_model_gpm = paste0(path_data, "/200_model_gpm_sr/")
path_plots = paste0(path_data, "/plots/")
path_rdata = paste0(path_data, "/rdata/")
path_meta = paste0(path_data, "/meta/")
path_temp = paste0(path_data, "/temp/")
path_output = paste0(path_data, "/output/")
path_vis = paste0(path_data, "/vis/")
# Set libraries ----------------------------------------------------------------
library(biodivTools) # devtools::install_github("environmentalinformatics-marburg/biodivTools")
library(CAST)
library(corrplot)
library(doParallel)
library(grid)
library(gridExtra)
library(gpm)  # devtools::install_github("environmentalinformatics-marburg/gpm")
library(hsdar)
# library(lavaan)
# library(rPointDB)
library(rgeos)
library(ggplot2)
library(mapview)
# library(metTools)  # devtools::install_github("environmentalinformatics-marburg/metTools")
library(raster)
library(RStoolbox)
library(reshape2)
library(rgdal)
# library(satellite)
library(satelliteTools)  # devtools::install_github("environmentalinformatics-marburg/satelliteTools")
# library(semPlot)
library(sp)
library(spacetime)
# library(vegan)
# library(yaml)
# Other settings ---------------------------------------------------------------
source(filepath_source)
rasterOptions(tmpdir = path_temp)
saga_cmd = "C:/OSGeo4W64/apps/saga-ltr/saga_cmd.exe"
# initOTB("C:/OSGeo4W64/bin/")
initOTB("C:/OSGeo4W64/OTB-6.2.0-Win64/bin/")
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
dir.create(paste0(path_hyp_glcm), showWarnings = FALSE)
hd_files = c(list.files(path_hyp_kmdc, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
windows = c(3, 11, 31)
n_grey = c(32)
i = 1
filename = basename(hd_files[i])
productid = substr(filename, 1, nchar(filename)-4)
r = readRDS(hd_files[[i]])
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
txtr_wg = stack(unlist(txtr_wg, recursive = TRUE))
txtr_wg
paste0(path_hyp_glcm, productid, "_glcm.rds"))
paste0(path_hyp_glcm, productid, "_glcm.rds")
saveRDS(txtr_wg, file = paste0(path_hyp_glcm, productid, "_glcm.rds"))
dir.create(paste0(path_hyp_glcm), showWarnings = FALSE)
hd_files = c(list.files(path_hyp_kmdc, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
windows = c(3, 11, 31)
n_grey = c(32)
foreach (i = seq(length(hd_files))) %do% {
filename = basename(hd_files[i])
productid = substr(filename, 1, nchar(filename)-4)
r = readRDS(hd_files[[i]])
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
txtr_wg = stack(unlist(txtr_wg, recursive = TRUE))
saveRDS(txtr_wg, file = paste0(path_hyp_glcm, productid, "_glcm.rds"))
}
# Compute texture metrics on mean distance from centroid datasets.
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
# if(length(showConnections()) == 0){
#   cores = 2
#   cl = parallel::makeCluster(cores)
#   doParallel::registerDoParallel(cl)
# }
dir.create(paste0(path_hyp_glcm), showWarnings = FALSE)
hd_files = c(list.files(path_hyp_kmdc, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
windows = c(3, 11, 31)
n_grey = c(32)
foreach (i = seq(length(hd_files))) %do% {
filename = basename(hd_files[i])
productid = substr(filename, 1, nchar(filename)-4)
r = readRDS(hd_files[[i]])
txtr_wg = lapply(windows, function(w){
txtr_g = lapply(n_grey, function(g){
txtr = glcmTextures(r, kernel_size = w,
stats = c("entropy", "homogeneity", "second_moment"),
n_grey = g, parallel = FALSE)
names(txtr[[1]]) = paste0(productid, "_", names(txtr[[1]]), "_w", sprintf("%02d", w), "_g", sprintf("%02d", g))
return(txtr)
})
})
txtr_wg = stack(unlist(txtr_wg, recursive = TRUE))
saveRDS(txtr_wg, file = paste0(path_hyp_glcm, productid, "_glcm.rds"))
}
# Visually check data
visCheck(datapath = path_hyp_glcm, polygonfile = paste0(path_plots, "BPolygon.shp"), band = 1)
dir.create(paste0(path_hyp_pred), showWarnings = FALSE)
hd_files = c(list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_kmdc, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_glcm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_raoq, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
preds = foreach (i = seq(length(hd_files))) %do% {
print(i)
r = readRDS(hd_files[[i]])
nms = names(r)
plotid = substr(nms[1], 1, 4)
productid = substr(nms, 6, nchar(nms))
l = lapply(seq(nlayers(r)), function(l){
df = data.frame(mean(getValues(r[[l]]), na.rm = TRUE), sd(getValues(r[[l]]), na.rm = TRUE))
colnames(df) = c(paste0(productid[l], c("_mean", "_sd")))
return(df)
})
df = do.call("cbind", l)
df = data.frame(plotID = plotid, df)
return(df)
}
grep("pcai_kmdc_glcm.rds", hd_files)
grep("vegidcs_kmdc_glcm.rds", hd_files)
grp = list(grep("vegidcs.rds", hd_files),
grep("vegidcs_raoq_3.rds", hd_files),
grep("vegidcs_kmdc.rds", hd_files),
grep("vegidcs_kmdc_glcm.rds", hd_files),
grep("vegidcs_kmdc_raoq_3.rds", hd_files),
grep("pcai_raoq_3.rds", hd_files),
grep("pcai_kmdc.rds", hd_files),
grep("pcai_kmdc_glcm.rds", hd_files),
grep("pcai_kmdc_raoq_3.rds", hd_files))
length(unlist(grp)) == length(preds)
if(length(unlist(grp)) == length(preds)){
df = lapply(grp, function(g){
do.call("rbind", preds[g])
})
df = do.call("cbind", df)
df = df[, -grep("plotID", colnames(df))[-1]]
}
saveRDS(df, file = paste0(path_hyp_pred, "hyperspec_preds.rds"))
head(df)
complete.cases(df, file = paste0(path_hyp_pred, "hyperspec_preds.rds"))
complete.cases(df)
all(complete.cases(df))
dim(df)
stopCluster(cl)
# Visually check data
corrplot(cor(df[, -1]))
?corrplot
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
path_hyp_pred
preds = readRDS(paste0(path_hyp_pred, "hyperspec_preds.rds"))
bd = readRDS(paste0(path_biodiv, "biodiv.rds"))
comb = merge(bd, preds, by = c("plotID"), all.x = TRUE, all.y = TRUE)
comb$SelCat = substr(as.character(comb$plotID), 1, 3)
comb$SelNbr = substr(as.character(comb$plotID), 4, 4)
col_selector = which(names(comb) %in% c("SelCat", "SelNbr"))
col_diversity = seq(which("SRmammals" == colnames(comb)),
which("SRallplants" == colnames(comb)))
colnames(comb)
col_precitors = c(which("elevation" == colnames(comb)),
seq(which("lui_biomass_removal" == colnames(comb)),
which("lui" == colnames(comb))),
seq(which("CARI_mean" == colnames(comb)),
which("pcai_kmdc_raoq_sd" == colnames(comb))))
which(!seq(ncol(comb)) %in% c(col_selector, col_diversity, col_precitors))
col_meta = which(!seq(ncol(comb)) %in% c(col_selector, col_diversity, col_precitors))
meta <- createGPMMeta(comb, type = "input",
selector = col_selector,
response = col_diversity,
predictor = col_precitors,
meta = col_meta)
comb <- gpm(comb, meta, scale = FALSE)
dir.create(paste0(path_comb_gpm), showWarnings = FALSE)
path_comb_gpm
path_comb_gpm_sr = paste0(path_data, "/100_comb_gpm_sr/")
path_model_gpm_sr = paste0(path_data, "/200_model_gpm_sr/")
dir.create(paste0(path_comb_gpm_sr), showWarnings = FALSE)
saveRDS(comb, file = paste0(path_comb_gpm_sr, "ki_hyperspec_biodiv_non_scaled.rds"))
comb
comb
m1 = readRDS(paste0(path_comb_gpm_sr, "ki_hyperspec_biodiv_non_scaled_modell.rds"))
m1 = readRDS(paste0(path_model_gpm_sr, "ki_hyperspec_biodiv_non_scaled_modell.rds"))
m2 = readRDS(paste0(path_model_gpm_sr, "ki_hyperspec_biodiv_non_scaled_modell_rf.rds"))
m1@model$pls_ffs[[1]][[1]]$model
m2@model$pls_ffs[[1]][[1]]$model
m2@model[[1]][[1]][[1]]$model
m2@model[[1]][[1]][[1]]$model$pred
m2@model[[1]][[1]][[1]]$model$finalModel$importance
m1@model[[1]][[1]][[1]]$model$finalModel$importance
m1@model[[1]][[1]][[1]]$model$finalModel$coefficients
m1@model[[1]][[1]][[1]]$model$finalModel$loadings
m1@model[[1]][[1]][[1]]$model
m1@model[[1]][[1]][[1]]$model$finalModel$loadings
m2@model[[1]][[1]][[1]]$model$finalModel$importance
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
dir.create(paste0(path_model_gpm_sr), showWarnings = FALSE)
comb = readRDS(paste0(path_comb_gpm_sr, "ki_hyperspec_biodiv_non_scaled.rds"))
comb@meta$input$RESPONSE_FINAL = "SRsnails"
comb@data$input = comb@data$input[complete.cases(comb@data$input[, c(comb@meta$input$RESPONSE_FINAL, comb@meta$input$PREDICTOR_FINAL)]), ]
comb = createIndexFolds(x = comb, nested_cv = FALSE)
comb@meta$input$PREDICTOR_FINAL
comb@meta$input$PREDICTOR_FINAL[, -seq(7)]
comb@meta$input$PREDICTOR_FINAL[, -c(1:7)]
comb@meta$input$PREDICTOR_FINAL[-c(1:7)]
comb@meta$input$PREDICTOR_FINAL = comb@meta$input$PREDICTOR_FINAL[-c(1:7)]
comb = trainModel(x = comb,
metric = "RMSE",
n_var = NULL,
mthd = "rf",
mode = "ffs",
seed_nbr = 11,
cv_nbr = NULL,
var_selection = "indv",
filepath_tmp = NULL)
saveRDS(comb, file = paste0(path_model_gpm_sr, "ki_hyperspec_biodiv_non_scaled_modell_rf_rs_only.rds"))
comb@model[[1]][[1]][[1]]$model
comb@model[[1]][[1]][[2]]$model
comb@model[[1]][[2]][[1]]$model
comb@model[[1]][[1]][[1]]$model
comb@model[[1]][[1]][[1]]$model$results
comb@meta$input$TRAIN_TEST
comb@model[[1]][[1]][[1]]$model$finalModel
comb@model[[1]][[1]][[1]]$model
comb@model[[1]][[1]][[1]]$model$metric
comb@model[[1]][[1]][[1]]$model$resample
comb@model[[1]][[1]][[1]]$model
comb@model[[1]][[1]][[1]]$model$resample
comb@model[[1]][[1]][[1]]$model$resample[comb@model[[1]][[1]][[1]]$model$resample$mtry == 3,]
summary(comb@model[[1]][[1]][[1]]$model$resample[comb@model[[1]][[1]][[1]]$model$resample$mtry == 3,])
comb@model[[1]][[1]][[1]]$model
comb@model[[1]][[1]][[1]]$model$perfNames
comb@model[[1]][[1]][[1]]$model$selectedvars
comb@model[[1]][[1]][[1]]$model$selectedvars_perf_SE
comb@model[[1]][[1]][[1]]$model$selectedvars_perf
comb@model[[1]][[1]][[1]]$model$levels
comb@model[[1]][[1]][[1]]$model$finalModel
comb@model[[1]][[1]][[1]]$model$finalModel$importance
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
comb = readRDS(paste0(path_comb_gpm_sr, "ki_hyperspec_biodiv_non_scaled.rds"))
comb@meta$input$RESPONSE_FINAL
r = comb@meta$input$RESPONSE_FINAL[[1
]]
r
comb@meta$input$RESPONSE
comb@meta$input$RESPONSE_FINAL = r
comb@data$input = comb@data$input[complete.cases(comb@data$input[, c(comb@meta$input$RESPONSE_FINAL, comb@meta$input$PREDICTOR_FINAL)]), ]
comb@meta$input$RESPONSE_FINAL
nrow(comb@data$input)
comb@meta$input$PREDICTOR
comb@meta$input$PREDICTOR_FINAL = comb@meta$input$PREDICTOR[-c(1:7)]
comb@meta$input$PREDICTOR_FINAL
comb
r
paste0(path_model_gpm_sr,
"ki_hyperspec_biodiv_non_scaled_modell_rf_rs_only_",
r,
".rds")
path_model_gpm_sr
hd_files = c(list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_kmdc, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_glcm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_raoq, recursive = FALSE, full.names = TRUE))
hd_files
grp = list(grep("vegidcs.rds", hd_files),
grep("vegidcs_raoq_3.rds", hd_files),
grep("vegidcs_kmdc.rds", hd_files),
grep("vegidcs_kmdc_glcm.rds", hd_files),
grep("vegidcs_kmdc_raoq_3.rds", hd_files),
grep("pcai_raoq_3.rds", hd_files),
grep("pcai_kmdc.rds", hd_files),
grep("pcai_kmdc_glcm.rds", hd_files),
grep("pcai_kmdc_raoq_3.rds", hd_files))
grp
hd_files[grep("cof1", hd_files)]
comb@meta$input$PREDICTOR_FINAL
