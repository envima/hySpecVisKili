stopCluster(cl)
# Compute mean distance from centroid on original band stack and
# scaled vegetation inidces stack
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 1
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
dir.create(paste0(path_hyp_kmdc), showWarnings = FALSE)
# Compute mean distance from centroid on original band stack
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
foreach (i = seq(length(hd_files)), .packages = c("raster")) %do% {
print(filename)
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_kmdc")
r = readRDS(hd_files[[i]])
rds = getValues(r)
all_na = grep(nrow(rds), summary(rds)[7,])
if(length(all_na) > 0){
rds = rds[,-all_na]
} else {
all_na = -1
}
cc = which(complete.cases(rds))
rds_cc = rds[cc, ]
km = kmeans(rds_cc, center = 1)
kmd = sqrt(rowSums(rds_cc - fitted(km))**2)
rds_kmd = rds[, 1]
rds_kmd[cc] = kmd
rds_kmd = setValues(r[[1]], rds_kmd)
names(rds_kmd) = productid
saveRDS(rds_kmd, file=paste0(path_hyp_kmdc, productid, ".rds"))
}
trophic_levels = rbind(data.frame(tlevel = "Plants",
groups = c("SRallplants", "SRasterids", "SRconifers", "SReudicots",
"SRferns", "SRlycopodiopsida", "SRmagnoliids",
"SRmonocots", "SRrosids")),
data.frame(tlevel = "Herbivore",
groups = c("SRbees", "SRmoths", "SRorthoptera")),
data.frame(tlevel = "Decomposer",
groups = c("SRdungbeetles", "SRmillipedes", "SRcollembola")),
data.frame(tlevel = "Predators",
groups = c("SRspiders", "SRheteroptera", "SRotheraculeata",
"SRparasitoids", "SRothercoleoptera")),
data.frame(tlevel = "Flying predatores",
groups = c("SRbats", "SRbirds")),
data.frame(tlevel = "Generalist",
groups = c("SRmammals", "SRanimals", "SRsyrphids", "SRants", "SSRsnails")))
trophic_levels
install.packages("link2GI")
library(link2GI)
?setproj
?initproj
?initProj
library(link2GI)
?initProj
envrmt = initProj(projRootDir = base_path, GRASSlocation = "data/grass",
projFolders = folders, prefix = "path_", global = FALSE)
base_path = "C:/Users/tnauss/permanent/edu/msc-phygeo-envinsys-plygrnd"
envrmt = initProj(projRootDir = base_path, GRASSlocation = "data/grass",
projFolders = folders, prefix = "path_", global = FALSE)
envrmt = initProj(projRootDir = base_path, GRASSlocation = "data/grass",
projFolders = folders, path_prefix = "path_", global = FALSE)
folders = c("data/", "data/aerial", "data/lidar", "data/grass", "data/tmp", "data/rdata", "data/results", "run", "log")
base_path = "C:/Users/tnauss/permanent/edu/msc-phygeo-envinsys-plygrnd"
envrmt = initProj(projRootDir = base_path, GRASSlocation = "data/grass",
projFolders = folders, path_prefix = "path_", global = FALSE)
envrmt
folders = c("data/", "data/aerial/", "data/lidar/", "data/grass/", "data/tmp/", "data/rdata/", "data/results/", "run/", "log/")
envrmt = initProj(projRootDir = base_path, GRASSlocation = "data/grass",
projFolders = folders, path_prefix = "path_", global = FALSE)
envrmt
lsf.str("package:link2GI")
?add2Path
=checkPCDomain
?checkPCDomain
?findGRASS
findGRASS
findGRASS()
findGRASS(searchLocation = "C:/OSGeo4W64/apps/grass")
findGRASS(searchLocation = "C:\OSGeo4W64/apps/grass")
findGRASS(searchLocation = "C:/OSGeo4W64/apps/grass")
findGRASS(searchLocation = "C:/OSGeo4W64/apps/grass")
?linkGrass
?linkGRASS7
?findGrass
?findGRASS
t = "C:/Users/tnauss/"
t %in% paste0(LETTERS,":")
paste0(LETTERS, ":")
grass_path = findGrass()
grass_path = findGRASS()
grass_path
searchLocation = t
t
paste0(LETTERS,":") %in% searchLocation
grep(paste0(LETTERS,":"), searchLocation)
grep(searchLocation, paste0(LETTERS,":"))
pmatch(searchLocation, paste0(LETTERS,":"))
regexpr(searchLocation, paste0(LETTERS,":"))
?regexpr
gregexpr(searchLocation, paste0(LETTERS,":"))
paste(LETTERS,":", collapse="|")
grep(searchLocation, paste(LETTERS,":", collapse="|"))
grep(paste(LETTERS,":", collapse="|"), searchLocation)
paste(LETTERS,":", collapse="|")
searchLocation
grepl(paste(LETTERS,":", collapse="|"), searchLocation)
grepl(paste(LETTERS,":", collapse=" | "), searchLocation)
searchLocation = "C:"
grepl(paste(LETTERS,":", collapse=" | "), searchLocation)
paste(LETTERS,":", collapse=" | ")
paste(LETTERS,":", collapse="| ")
paste(LETTERS,":", collapse=" |")
paste(LETTERS,":", collapse="|")
?paste
paste(LETTERS,":", sep = "", collapse=" | ")
grepl(paste(LETTERS,":", sep = "", collapse=" | "), searchLocation)
grepl(paste(LETTERS,":", sep = "", collapse="|"), searchLocation)
searchLocation = t
grepl(paste(LETTERS,":", sep = "", collapse="|"), searchLocation)
grep(paste(LETTERS,":", sep = "", collapse="|"), searchLocation)
searchLocation
grep(paste(LETTERS,":", sep = "", collapse="|"), searchLocation)
searchLocation = "C/test"
grep(paste(LETTERS,":", sep = "", collapse="|"), searchLocation)
grepl(paste(LETTERS,":", sep = "", collapse="|"), searchLocation)
?paste0
grepl(paste0(LETTERS,":", collapse="|"), searchLocation)
searchLocation = "C:/test"
grepl(paste0(LETTERS,":", collapse="|"), searchLocation)
?findGRASS
grass_path
saga_path = findSAGA()
saga_path = findSAGA()
```
saga_path
otb_path = findOTB()
otb_path
envrmt
?base_path
?initProj
tempdir()
library(link2GI)
?initProj
filepath_base = "C:/Users/tnauss/permanent/edu/msc-phygeo-envinsys-plygrnd"
# Set project specific subfolders
project_folders = c("data/", "data/aerial/", "data/lidar/", "data/grass/",
"data/tmp/", "run/", "log/")
envrmt = initProj(projRootDir = filepath_base, GRASSlocation = "data/grass",
projFolders = folders, path_prefix = "path_", global = FALSE)
envrmt = initProj(projRootDir = filepath_base, GRASSlocation = "data/grass",
projFolders = project_folders, path_prefix = "path_",
global = FALSE)
print(envrmt)
print(unlist(envrmt))
print(as.table(envrmt))
print(as.table(unlist(envrmt)))
print(envrmt)
print(envrmt)[1:3]
print(envrmt[1:3])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path='{{ site.baseurl }}/assets/images/rmd_images/e01-01/')
Setting up a project environment always requires the definition of different folder pathes and the loading of necessary R packages and additional functions. If additional software like GIS should also be accessible, respective binaries and software environments must be linked, too.
envrmt$path_data_temp
envrmt$path_data_tmp
envrmt = initProj(projRootDir = filepath_base, GRASSlocation = "data/grass",
projFolders = project_folders, path_prefix = "path_",
global = FALSE)
# Set libraries ----------------------------------------------------------------
libs
# Set libraries ----------------------------------------------------------------
libs = c(raster,
rgdal,
sp)
# Set libraries ----------------------------------------------------------------
libs = c("raster",
"rgdal",
"sp")
lapply(libs, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path='{{ site.baseurl }}/assets/images/rmd_images/e01-01/')
grass_path
?findGRASS
# Move markdown files and related figures to jekyll
files = list.files(dirname(rstudioapi::getActiveDocumentContext()$path),
recursive = TRUE, full.names = TRUE)
# Copy MD files
md_files = files[grep("\\.md$", files)]
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
dir.create(target_folder, showWarnings = FALSE)
for(f in md_files){
f_in = readLines(f)
title_line = grep("title:", f_in)
header_start = grep("---", f_in)[1]
header_end = grep("---", f_in)[2]
new_header = c(f_in[header_start], f_in[title_line], "toc: true",
"toc_label: In this example", f_in[header_end])
if(!is.na(header_end)){
f_in = c(new_header, f_in[-seq(header_end)])
fc = file(f, "w")
writeLines(f_in, fc)
close(fc)
}
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Copy RMD figures
rmd_image_folder = dirname(files[grep("rmd_images", files)])
target_folder = paste0(substr(rmd_image_folder[1], 1, gregexpr(pattern ='staging', rmd_image_folder[1])[[1]][1]-1),
"docs/assets/images/rmd_images/")
dir.create(target_folder, showWarnings = FALSE)
for(f in rmd_image_folder){
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Clean up
unlink(rmd_image_folder, recursive = TRUE)
file.remove(md_files)
html_files = files[grep("\\.html$", files)]
file.remove(html_files)
# Move markdown files and related figures to jekyll
files = list.files(dirname(rstudioapi::getActiveDocumentContext()$path),
recursive = TRUE, full.names = TRUE)
files
# Copy MD files
md_files = files[grep("\\.md$", files)]
md_files
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
target_folder
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
dir.create(target_folder, showWarnings = FALSE)
for(f in md_files){
f_in = readLines(f)
title_line = grep("title:", f_in)
header_start = grep("---", f_in)[1]
header_end = grep("---", f_in)[2]
new_header = c(f_in[header_start], f_in[title_line], "toc: true",
"toc_label: In this example", f_in[header_end])
if(!is.na(header_end)){
f_in = c(new_header, f_in[-seq(header_end)])
fc = file(f, "w")
writeLines(f_in, fc)
close(fc)
}
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Copy RMD figures
rmd_image_folder = dirname(files[grep("rmd_images", files)])
target_folder = paste0(substr(rmd_image_folder[1], 1, gregexpr(pattern ='staging', rmd_image_folder[1])[[1]][1]-1),
"docs/assets/images/rmd_images/")
dir.create(target_folder, showWarnings = FALSE)
for(f in rmd_image_folder){
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Clean up
unlink(rmd_image_folder, recursive = TRUE)
file.remove(md_files)
html_files = files[grep("\\.html$", files)]
file.remove(html_files)
# Move markdown files and related figures to jekyll
files = list.files(dirname(rstudioapi::getActiveDocumentContext()$path),
recursive = TRUE, full.names = TRUE)
# Copy MD files
md_files = files[grep("\\.md$", files)]
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
dir.create(target_folder, showWarnings = FALSE)
for(f in md_files){
f_in = readLines(f)
title_line = grep("title:", f_in)
header_start = grep("---", f_in)[1]
header_end = grep("---", f_in)[2]
new_header = c(f_in[header_start], f_in[title_line], "toc: true",
"toc_label: In this example", f_in[header_end])
if(!is.na(header_end)){
f_in = c(new_header, f_in[-seq(header_end)])
fc = file(f, "w")
writeLines(f_in, fc)
close(fc)
}
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Copy RMD figures
rmd_image_folder = dirname(files[grep("rmd_images", files)])
target_folder = paste0(substr(rmd_image_folder[1], 1, gregexpr(pattern ='staging', rmd_image_folder[1])[[1]][1]-1),
"docs/assets/images/rmd_images/")
dir.create(target_folder, showWarnings = FALSE)
for(f in rmd_image_folder){
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Clean up
unlink(rmd_image_folder, recursive = TRUE)
file.remove(md_files)
html_files = files[grep("\\.html$", files)]
file.remove(html_files)
# Move markdown files and related figures to jekyll
files = list.files(dirname(rstudioapi::getActiveDocumentContext()$path),
recursive = TRUE, full.names = TRUE)
# Copy MD files
md_files = files[grep("\\.md$", files)]
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
dir.create(target_folder, showWarnings = FALSE)
for(f in md_files){
f_in = readLines(f)
title_line = grep("title:", f_in)
header_start = grep("---", f_in)[1]
header_end = grep("---", f_in)[2]
new_header = c(f_in[header_start], f_in[title_line], "toc: true",
"toc_label: In this example", f_in[header_end])
if(!is.na(header_end)){
f_in = c(new_header, f_in[-seq(header_end)])
fc = file(f, "w")
writeLines(f_in, fc)
close(fc)
}
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Copy RMD figures
rmd_image_folder = dirname(files[grep("rmd_images", files)])
target_folder = paste0(substr(rmd_image_folder[1], 1, gregexpr(pattern ='staging', rmd_image_folder[1])[[1]][1]-1),
"docs/assets/images/rmd_images/")
dir.create(target_folder, showWarnings = FALSE)
for(f in rmd_image_folder){
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Clean up
unlink(rmd_image_folder, recursive = TRUE)
file.remove(md_files)
html_files = files[grep("\\.html$", files)]
file.remove(html_files)
# Move markdown files and related figures to jekyll
files = list.files(dirname(rstudioapi::getActiveDocumentContext()$path),
recursive = TRUE, full.names = TRUE)
# Copy MD files
md_files = files[grep("\\.md$", files)]
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
dir.create(target_folder, showWarnings = FALSE)
for(f in md_files){
f_in = readLines(f)
title_line = grep("title:", f_in)
header_start = grep("---", f_in)[1]
header_end = grep("---", f_in)[2]
new_header = c(f_in[header_start], f_in[title_line], "toc: true",
"toc_label: In this example", f_in[header_end])
if(!is.na(header_end)){
f_in = c(new_header, f_in[-seq(header_end)])
fc = file(f, "w")
writeLines(f_in, fc)
close(fc)
}
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Copy RMD figures
rmd_image_folder = dirname(files[grep("rmd_images", files)])
target_folder = paste0(substr(rmd_image_folder[1], 1, gregexpr(pattern ='staging', rmd_image_folder[1])[[1]][1]-1),
"docs/assets/images/rmd_images/")
dir.create(target_folder, showWarnings = FALSE)
for(f in rmd_image_folder){
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Clean up
unlink(rmd_image_folder, recursive = TRUE)
file.remove(md_files)
html_files = files[grep("\\.html$", files)]
file.remove(html_files)
# Move markdown files and related figures to jekyll
files = list.files(dirname(rstudioapi::getActiveDocumentContext()$path),
recursive = TRUE, full.names = TRUE)
# Copy MD files
md_files = files[grep("\\.md$", files)]
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
dir.create(target_folder, showWarnings = FALSE)
for(f in md_files){
f_in = readLines(f)
title_line = grep("title:", f_in)
header_start = grep("---", f_in)[1]
header_end = grep("---", f_in)[2]
new_header = c(f_in[header_start], f_in[title_line], "toc: true",
"toc_label: In this example", f_in[header_end])
if(!is.na(header_end)){
f_in = c(new_header, f_in[-seq(header_end)])
fc = file(f, "w")
writeLines(f_in, fc)
close(fc)
}
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Copy RMD figures
rmd_image_folder = dirname(files[grep("rmd_images", files)])
target_folder = paste0(substr(rmd_image_folder[1], 1, gregexpr(pattern ='staging', rmd_image_folder[1])[[1]][1]-1),
"docs/assets/images/rmd_images/")
dir.create(target_folder, showWarnings = FALSE)
for(f in rmd_image_folder){
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Clean up
unlink(rmd_image_folder, recursive = TRUE)
file.remove(md_files)
html_files = files[grep("\\.html$", files)]
file.remove(html_files)
# Move markdown files and related figures to jekyll
files = list.files(dirname(rstudioapi::getActiveDocumentContext()$path),
recursive = TRUE, full.names = TRUE)
# Copy MD files
md_files = files[grep("\\.md$", files)]
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
dir.create(target_folder, showWarnings = FALSE)
for(f in md_files){
f_in = readLines(f)
title_line = grep("title:", f_in)
header_start = grep("---", f_in)[1]
header_end = grep("---", f_in)[2]
new_header = c(f_in[header_start], f_in[title_line], "toc: true",
"toc_label: In this example", f_in[header_end])
if(!is.na(header_end)){
f_in = c(new_header, f_in[-seq(header_end)])
fc = file(f, "w")
writeLines(f_in, fc)
close(fc)
}
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Copy RMD figures
rmd_image_folder = dirname(files[grep("rmd_images", files)])
target_folder = paste0(substr(rmd_image_folder[1], 1, gregexpr(pattern ='staging', rmd_image_folder[1])[[1]][1]-1),
"docs/assets/images/rmd_images/")
dir.create(target_folder, showWarnings = FALSE)
for(f in rmd_image_folder){
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Clean up
unlink(rmd_image_folder, recursive = TRUE)
file.remove(md_files)
html_files = files[grep("\\.html$", files)]
file.remove(html_files)
# Move markdown files and related figures to jekyll
files = list.files(dirname(rstudioapi::getActiveDocumentContext()$path),
recursive = TRUE, full.names = TRUE)
# Copy MD files
md_files = files[grep("\\.md$", files)]
target_folder = paste0(substr(md_files[1], 1, gregexpr(pattern ='staging', md_files[1])[[1]][1]-1),
"docs/_includes/")
dir.create(target_folder, showWarnings = FALSE)
for(f in md_files){
f_in = readLines(f)
title_line = grep("title:", f_in)
header_start = grep("---", f_in)[1]
header_end = grep("---", f_in)[2]
new_header = c(f_in[header_start], f_in[title_line], "toc: true",
"toc_label: In this example", f_in[header_end])
if(!is.na(header_end)){
f_in = c(new_header, f_in[-seq(header_end)])
fc = file(f, "w")
writeLines(f_in, fc)
close(fc)
}
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Copy RMD figures
rmd_image_folder = dirname(files[grep("rmd_images", files)])
target_folder = paste0(substr(rmd_image_folder[1], 1, gregexpr(pattern ='staging', rmd_image_folder[1])[[1]][1]-1),
"docs/assets/images/rmd_images/")
dir.create(target_folder, showWarnings = FALSE)
for(f in rmd_image_folder){
file.copy(from=f, to=target_folder,
overwrite = TRUE, recursive = TRUE,
copy.mode = TRUE)
}
# Clean up
unlink(rmd_image_folder, recursive = TRUE)
file.remove(md_files)
html_files = files[grep("\\.html$", files)]
file.remove(html_files)
