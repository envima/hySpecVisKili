tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[108]]/mir[[108]]
plot(r[[100]])
plot(mir[[100]])
plot(r[[100]])
plot(mir[[100]])
r = readRDS(f)
m = mnf(as(r, "SpatialGridDataFrame"), use = "complete.obs")
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
plot(r[[100]])
plot(mir[[100]])
plot(r[[108]])
plot(mir[[108]])
plot(r[[100]])
plot(mir[[100]])
r[[100]]/mir[[100]]
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data)[, use] %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[100]]/mir[[100]]
plot(r[[100]])
plot(mir[[100]])
r = readRDS(f)
m = mnf(as(r, "SpatialGridDataFrame"), use = "complete.obs")
# thv = 1-m$values
# set_mean = which(thv < -0.10)
use = seq(2, length(m$values))
mi = as.matrix(m$x@data[, use]) %*% solve(m$rotation)[use, ]
tmp = r[[1]]
mir = stack(lapply(seq(ncol(mi)), function(i){
setValues(tmp, mi[, i])
}))
r[[100]]/mir[[100]]
r[[108]]/mir[[108]]
plot(r[[100]])
plot(r[[108]])
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_dividcs), showWarnings = FALSE)
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_dividcs), showWarnings = FALSE)
i = 1
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
r
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
filepath_source
filepath_source = paste0(filepath_base, "HySpec_KiLi/src/001_functions.R")
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
source(filepath_source)
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
raomatrix
stopCluster(cl)
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
hd_files = list.files(path_hyp_aio, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_dividcs), showWarnings = FALSE)
i = 1
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
# ra = aggregate(r, fact=2, fun=mean)
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=3,
shannon=FALSE,
debugging=TRUE,
simplify=3)
head(raomatrix)
raor = setValues(r[[1]], raomatrix[[1]])
raor
plotid
names(raor) = paste0(plotid, "raoq")
raor
plot(raor)
saveRDS(raor, file = paste0(path_hyp_dividcs,
substr(basename(hd_files[[i]]), 1, 4),
"_raoq_", window, ".rds"))
# Compute Rao's Q on original band values
window = 3
paste0(path_hyp_dividcs,
substr(basename(hd_files[[i]]), 1, 4),
"_raoq_", window, ".rds")
saveRDS(raor, file = paste0(path_hyp_dividcs,
substr(basename(hd_files[[i]]), 1, 4),
"_raoq_", window, ".rds"))
# Compute Rao's Q on original band values
windows = c(3, 10)
# Compute Rao's Q on original band values
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
# Compute Rao's Q on original band values
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
# Compute Rao's Q on vegetation indices
hd_files = list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE)
# Compute Rao's Q on individual vegetation indices
hd_files = list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
i = 1
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
w = 3
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
r
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
hd_files
plotid = substr(basename(hd_files[[i]]), 1, 4)
plotid
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
# Compute Rao's Q on original band values
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
# Compute Rao's Q on individual vegetation indices
hd_files = list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE)
plotid = substr(basename(hd_files[[i]]), 1, 4)
r = readRDS(hd_files[[i]])
raomatrix <- spectralrao(as.list(r),
mode="multidimension",
distance_m="euclidean",
window=w,
shannon=FALSE,
debugging=TRUE,
simplify=3)
plot(r)
# Compute Rao's Q on original band and vegetation indices values
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
# Compute Rao's Q on original band and vegetation indices values
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
hd_files
i = 1
basename(hd_files[[i]])
filename = basename(hd_files[[i]])
substr(filename, 1, nchar(filename)-4)
productid = substr(filename, 1, nchar(filename)-4)
productid
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
paste0(path_hyp_dividcs,
productid, "_", w, ".rds"))
paste0(path_hyp_dividcs,
productid, "_", w, ".rds")
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
paste0(path_hyp_dividcs,
productid, "_", w, ".rds")
path_hyp_dividcs
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
path_hyp_dividcs
paste0(path_hyp_raoq,
productid, "_", w, ".rds")
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_vegidcs), showWarnings = FALSE)
vis =  c("CARI",
"Carter", "Carter2", "Carter3", "Carter4", "Carter5", "Carter6",
"CI", "CI2", "ClAInt",
"CRI1", "CRI2", "CRI3", "CRI4",
"Datt", "Datt2", "Datt4", "Datt5", "Datt6",
"DD", "DDn", "DWSI4",
"EVI", "GDVI_2", "GDVI_3", "GDVI_4", "GI", "Gitelson", "Gitelson2",
"GMI1", "GMI2", "GreenNDVI", "Maccioni",
"MCARI", "MCARI/OSAVI", "MCARI2", "MCARI2/OSAVI2",
"mND705", "mNDVI", "MPRI", "MSAVI", "mSR", "mSR2", "mSR705",
"MTCI", "MTVI", "NDVI", "NDVI2", "NDVI3", "NPCI",
"OSAVI", "OSAVI2", "PARS", "PRI", "PRI*CI2", "PRI_norm", "PSND",
"PSRI", "PSSR", "PWI", "RDVI", "REP_Li", "SAVI", "SIPI", "SPVI",
"SR", "SR1", "SR2", "SR3", "SR4", "SR5", "SR6", "SR7", "SR8",
"SRPI", "TCARI", "TCARI/OSAVI", "TCARI2", "TCARI2/OSAVI2",
"TGI", "TVI", "Vogelmann", "Vogelmann2", "Vogelmann4")
i = 1
plotid = substr(basename(hd_files[[i]]), 1, 4)
m = h_meta[[2]][[h_meta[[1]]$list[grep(plotid, h_meta[[1]]$plotID)]]]
r = hsdar::speclib(brick(readRDS(hd_files[[i]])),
wavelength = m$wavelength,
fwhm = m$fwhm,
continuousdata = "auto")
v = vegindex(r, index = vis)
vr = v@spectra@spectra_ra
names(vr) = vis
vr
?raster
inMemory(vr)
?readAll
vr = readAll(v@spectra@spectra_ra)
names(vr) = vis
vr
saveRDS(vr, file = paste0(path_hyp_vegidcs, plotid, "_vegidcs.rds"))
test = readRDS(file = paste0(path_hyp_vegidcs, plotid, "_vegidcs.rds"))
test
plot(test)
# Compute vegetation indicies
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_vegidcs), showWarnings = FALSE)
vis =  c("CARI",
"Carter", "Carter2", "Carter3", "Carter4", "Carter5", "Carter6",
"CI", "CI2", "ClAInt",
"CRI1", "CRI2", "CRI3", "CRI4",
"Datt", "Datt2", "Datt4", "Datt5", "Datt6",
"DD", "DDn", "DWSI4",
"EVI", "GDVI_2", "GDVI_3", "GDVI_4", "GI", "Gitelson", "Gitelson2",
"GMI1", "GMI2", "GreenNDVI", "Maccioni",
"MCARI", "MCARI/OSAVI", "MCARI2", "MCARI2/OSAVI2",
"mND705", "mNDVI", "MPRI", "MSAVI", "mSR", "mSR2", "mSR705",
"MTCI", "MTVI", "NDVI", "NDVI2", "NDVI3", "NPCI",
"OSAVI", "OSAVI2", "PARS", "PRI", "PRI*CI2", "PRI_norm", "PSND",
"PSRI", "PSSR", "PWI", "RDVI", "REP_Li", "SAVI", "SIPI", "SPVI",
"SR", "SR1", "SR2", "SR3", "SR4", "SR5", "SR6", "SR7", "SR8",
"SRPI", "TCARI", "TCARI/OSAVI", "TCARI2", "TCARI2/OSAVI2",
"TGI", "TVI", "Vogelmann", "Vogelmann2", "Vogelmann4")
foreach(i = seq(length(hd_files)), .packages = c("hsdar", "raster")) %do% {
plotid = substr(basename(hd_files[[i]]), 1, 4)
m = h_meta[[2]][[h_meta[[1]]$list[grep(plotid, h_meta[[1]]$plotID)]]]
r = hsdar::speclib(brick(readRDS(hd_files[[i]])),
wavelength = m$wavelength,
fwhm = m$fwhm,
continuousdata = "auto")
v = vegindex(r, index = vis)
vr = readAll(v@spectra@spectra_ra)
names(vr) = vis
saveRDS(vr, file = paste0(path_hyp_vegidcs, plotid, "_vegidcs.rds"))
}
stopCluster(cl)
# Visually check data
visCheck(datapath = path_hyp_vegidcs, polygonfile = paste0(path_plots, "BPolygon.shp"), band = 47)
summary(unlist(lapply(files, function(f){nlayers(readRDS(files[[1]]))})))
path_hyp_raoq = paste0(path_data, "/060_hypspec_raoq/")
summary(unlist(lapply(files, function(f){nlayers(readRDS(files[[1]]))})))
files
files = list.files(path_hyp_vegidcs, full.names = TRUE)
summary(unlist(lapply(files, function(f){nlayers(readRDS(files[[1]]))})))
# Compute Rao's Q on original bands
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
hd_files
i = 1
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
# Compute Rao's Q on original bands
hd_files = c(list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE),
list.files(path_hyp_vegidcs, recursive = FALSE, full.names = TRUE))
filename = basename(hd_files[1])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
productid
i = 100
filename = basename(hd_files[1])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
productid
i = 100
filename = basename(hd_files[i])
productid = paste0(substr(filename, 1, nchar(filename)-4), "_raoq")
productid
grep("vegidcs", filename)
grepl("vegidcs", filename)
r = readRDS(hd_files[[i]])
?norm
?scale
r
r = scale(r, center = TRUE, scale = TRUE)
r
summary(r)
r = readRDS(hd_files[[i]])
summary(r)
r = readRDS(hd_files[[i]])
r
summary(r)
r
filename
summary(vr)
names(vr)[32]
plot(vr[[32]])
plot(vr[[31]])
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_vegidcs), showWarnings = FALSE)
vis =  c("CARI",
"Carter", "Carter2", "Carter3", "Carter4", "Carter5", "Carter6",
"CI", "CI2", "ClAInt",
"CRI1", "CRI2", "CRI3", "CRI4",
"Datt", "Datt2", "Datt4", "Datt5", "Datt6",
"DD", "DDn", "DWSI4",
"EVI", "GDVI_2", "GDVI_3", "GDVI_4", "GI", "Gitelson", "Gitelson2",
"GMI1", "GMI2", "Maccioni",
"MCARI", "MCARI/OSAVI", "MCARI2", "MCARI2/OSAVI2",
"mND705", "mNDVI", "MPRI", "MSAVI", "mSR", "mSR2", "mSR705",
"MTCI", "MTVI", "NDVI", "NDVI2", "NDVI3", "NPCI",
"OSAVI", "OSAVI2", "PARS", "PRI", "PRI*CI2", "PRI_norm", "PSND",
"PSRI", "PSSR", "PWI", "RDVI", "REP_Li", "SAVI", "SIPI", "SPVI",
"SR", "SR1", "SR2", "SR3", "SR4", "SR5", "SR6", "SR7", "SR8",
"SRPI", "TCARI", "TCARI/OSAVI", "TCARI2", "TCARI2/OSAVI2",
"TGI", "TVI", "Vogelmann", "Vogelmann2", "Vogelmann4")
# Compute vegetation indicies
source("C:/Users/tnauss/permanent/plygrnd/KI-Hyperspec/HySpec_KiLi/src/000_set_environment.R")
if(length(showConnections()) == 0){
cores = 3
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
}
hd_files = list.files(path_hyp_nrm, recursive = FALSE, full.names = TRUE)
h_meta = readRDS(paste0(path_meta, "hyp_meta.rds"))
dir.create(paste0(path_hyp_vegidcs), showWarnings = FALSE)
vis =  c("CARI",
"Carter", "Carter2", "Carter3", "Carter4", "Carter5", "Carter6",
"CI", "CI2", "ClAInt",
"CRI1", "CRI2", "CRI3", "CRI4",
"Datt", "Datt2", "Datt4", "Datt5", "Datt6",
"DD", "DDn", "DWSI4",
"EVI", "GDVI_2", "GDVI_3", "GDVI_4", "GI", "Gitelson", "Gitelson2",
"GMI1", "GMI2", "Maccioni",
"MCARI", "MCARI/OSAVI", "MCARI2", "MCARI2/OSAVI2",
"mND705", "mNDVI", "MPRI", "MSAVI", "mSR", "mSR2", "mSR705",
"MTCI", "MTVI", "NDVI", "NDVI2", "NDVI3", "NPCI",
"OSAVI", "OSAVI2", "PARS", "PRI", "PRI*CI2", "PRI_norm", "PSND",
"PSRI", "PSSR", "PWI", "RDVI", "REP_Li", "SAVI", "SIPI", "SPVI",
"SR", "SR1", "SR2", "SR3", "SR4", "SR5", "SR6", "SR7", "SR8",
"SRPI", "TCARI", "TCARI/OSAVI", "TCARI2", "TCARI2/OSAVI2",
"TGI", "TVI", "Vogelmann", "Vogelmann2", "Vogelmann4")
foreach(i = seq(length(hd_files)), .packages = c("hsdar", "raster")) %do% {
plotid = substr(basename(hd_files[[i]]), 1, 4)
m = h_meta[[2]][[h_meta[[1]]$list[grep(plotid, h_meta[[1]]$plotID)]]]
r = hsdar::speclib(brick(readRDS(hd_files[[i]])),
wavelength = m$wavelength,
fwhm = m$fwhm,
continuousdata = "auto")
v = vegindex(r, index = vis)
vr = readAll(v@spectra@spectra_ra)
names(vr) = paste0(plotid, "_", vis)
saveRDS(vr, file = paste0(path_hyp_vegidcs, plotid, "_vegidcs.rds"))
}
stopCluster(cl)
# Visually check data
visCheck(datapath = path_hyp_vegidcs, polygonfile = paste0(path_plots, "BPolygon.shp"), band = 47)
files = list.files(path_hyp_vegidcs
files = list.files(path_hyp_vegidcs, full.names = TRUE)
f = files[[1]]
f
df = read(f)
df = readRDS(f)
df
is.na(df)
any(is.na(df))
any(is.na(getValues(df)))
(is.na(getValues(df)))
summary(df)
plot(df)
is.na(getValues(df))
sum(is.na(getValues(df)))
nlayer(df)
nlayers(df)
i = 1
sum(is.na(df[[i]]))
df[[i]]
sum(is.na(getValues(df[[i]])))
nasum = lapply(nlayers(df), function(i){
sum(is.na(getValues(df[[i]])))
})
summary(nasum)
nasum
nasum = lapply(nlayers(df), function(i){
sum(is.na(getValues(df[[i]])))
})
nasum
nlayers(df)
nasum = lapply(seq(nlayers(df), function(i){
sum(is.na(getValues(df[[i]])))
})
summary(nasum)
})
nasum = lapply(seq(nlayers(df)), function(i){
sum(is.na(getValues(df[[i]])))
})
summary(nasum)
nasum
unlist(nasum)
min(unlist(nasum)) == max(unlist(nasum))
nacheck = do.call("rbind", lapply(files, function(f){
df = readRDS(f)
nasum = lapply(seq(nlayers(df)), function(i){
sum(is.na(getValues(df[[i]])))
})
return(data.frame(f = basename(f), nacheck = min(unlist(nasum)) == max(unlist(nasum))))
}))
nacheck
f = files[[47]]
f
df = readRDS(f)
plot(df[[1]])
plot(df[[2]])
nasum = lapply(seq(nlayers(df)), function(i){
sum(is.na(getValues(df[[i]])))
})
nasum
nasum
min(unlist(nasum))
max(unlist(nasum))
unlist(nasum)
f
